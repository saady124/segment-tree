struct segtree
{
  int size=1;
  vector<int>w;
  void init(int n)
  {
     while(size<n)size*=2;
     w.assign(2*size,0LL);
  }
  void operation(int &a,int b)
  {
      if(b==OO)return ;
      a=b;
  }
  void propagate(int x)
  {
    operation(w[2*x+1],w[x]);
    operation(w[2*x+2],w[x]);
    w[x]=OO;
  }
  void upd(int l,int r,int v)
  {
    upd(l,r,v,0,0,size);
  }
  void upd(int l,int r,int v,int x,int lx,int ry)
  {
    if(ry-lx!=1)
      propagate(x);
    if(lx>=r||ry<=l)return ;
    if(lx>=l&&ry<=r)
    {
        operation(w[x],v);
        return ;
    }
     int mid=(lx+ry)/2;
     upd(l,r,v,2*x+1,lx,mid); 
     upd(l,r,v,2*x+2,mid,ry);
  }
  int get(int i)
  {
    return get(i,0,0,size);
  }
  int get(int i,int x,int lx,int ry)
  {
     if(ry-lx==1)return w[x];
     propagate(x);
     int mid=(lx+ry)/2;
     if(i<mid)return get(i,2*x+1,lx,mid);
     else return get(i,2*x+2,mid,ry);
  }
};
