struct segtree
{
  int size=1;
  vector<int>sums;
  void init(int n)
  {
     while(size<n)size*=2;
     sums.assign(2*size,0ll);
  }
  void build(vector<int>&a)
  {
    build(a,0,0,size);
  }
  void build(vector<int>&a,int x,int lx,int ry)
  {
      if(ry-lx==1)
      {
        if(lx<a.size())
        sums[x]=a[lx];
        return ;
      }
      int mid=(lx+ry)/2;
      build(a,2*x+1,lx,mid);
      build(a,2*x+2,mid,ry);
      sums[x]=sums[2*x+1]+sums[2*x+2];
  }
  void set(int i,int v)
  {
    set(i,v,0,0,size);
  }
  void set(int i,int v,int x,int lx,int ry)
  {
     if(ry-lx==1)
     {
        sums[x]=v;
        return;
     }
     int mid=(lx+ry)/2;
     if(i<mid)
        set(i,v,2*x+1,lx,mid);
     else 
        set(i,v,2*x+2,mid,ry);
     sums[x]=sums[2*x+2]+sums[2*x+1];
  }
  int sum(int l,int r)
  {
    return sum(l,r,0,0,size);
  }
  int sum(int l,int r,int x,int lx,int ry)
  {
     if(lx>=r||ry<=l)
      return 0;
     if(lx>=l&&ry<=r)
      return sums[x];
     int mid=(lx+ry)/2;
     return sum(l,r,2*x+1,lx,mid)+sum(l,r,2*x+2,mid,ry);
  }
};
